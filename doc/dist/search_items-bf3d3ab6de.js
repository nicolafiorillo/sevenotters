searchNodes=[{"doc":"Provides the use macro to create an aggregate. Example: defmodule SevenCommerce.Aggregates.User do use Seven.Otters.Aggregate, aggregate_field: :id defstruct id: nil, user: nil, password: nil, cart: [] defp init_state, do: %__MODULE__{} defp pre_handle_command(_command, _state), do: :ok defp handle_command(_command, _state), do: {:managed, []} defp handle_event(_event, state), do: state end Module must declare the use of Seven.Otters.Aggregate module, specifying the field to use as correlation id; the field must be present in module structure: use Seven.Otters.Aggregate, aggregate_field: :id defstruct id: nil, ... Some function must be implemented in the aggregate.","ref":"Seven.Otters.Aggregate.html","title":"Seven.Otters.Aggregate","type":"module"},{"doc":"","ref":"Seven.Sync.Endpoint.html","title":"Seven.Sync.Endpoint","type":"module"},{"doc":"Callback implementation for Plug.call/2.","ref":"Seven.Sync.Endpoint.html#call/2","title":"Seven.Sync.Endpoint.call/2","type":"function"},{"doc":"Callback implementation for Plug.init/1.","ref":"Seven.Sync.Endpoint.html#init/1","title":"Seven.Sync.Endpoint.init/1","type":"function"},{"doc":"Getting started How to start with The Seven Otters to create your first CQRS/ES application. The aim of this documentation is to introduce the Seven Otters to developers who want to become familiar with the project.","ref":"getting_started.html","title":"Getting started","type":"extras"},{"doc":"An instance of MongoDB must be available and able to receive connections.","ref":"getting_started.html#requirements","title":"Getting started - Requirements","type":"extras"},{"doc":"Create a new project: mix new my_first_cqrses --sup Add :seven to project dependencies: defp deps do [ {:seven, &quot;~&gt; 0.1&quot;} ] end Update and compile: mix do deps.get, deps.compile, compile","ref":"getting_started.html#create-and-prepare-a-new-project","title":"Getting started - Create and prepare a new project","type":"extras"},{"doc":"Delete the following files: my_first_cqrses/lib/my_first_cqrses.ex my_first_cqrses/test/my_first_cqrses_test.exs","ref":"getting_started.html#clean-useless-stuff","title":"Getting started - Clean useless stuff","type":"extras"},{"doc":"Add the following sections to my_first_cqrses/config/config.exs: config :seven, Seven.Entities, entity_app: :my_first_cqrses config :logger, :console, format: &quot;$date-$time [$level] $message\\n&quot;, level: :info The first section indicates in which application all entities (aggregates, projections, etc.) are defined. By default, :seven connects to a MongoDB instace running on localhost at port 27017. To change this values add a further section: config :seven, Seven.Data.Persistence, database: &quot;my_first_cqrses&quot;, hostname: &quot;127.0.0.1&quot;, port: 27_017","ref":"getting_started.html#configure-application","title":"Getting started - Configure application","type":"extras"},{"doc":"Create a new folder my_first_cqrses/lib/aggregate and create a new file my_first_cqrses/lib/aggregate/user.ex. Substitute the content of file my_first_cqrses/lib/aggregate/user.ex with the following code: defmodule MyFirstCqrses.Aggregate.User do use Seven.Otters.Aggregate, aggregate_field: :user defstruct user: nil, password: nil @register_user_command &quot;RegisterUser&quot; @register_user_validation [ :map, fields: [ user: [:string], password: [:string, pattern: ~r/.{8,}/] ] ] @user_registered_event &quot;UserRegistered&quot; @moduledoc &quot;&quot;&quot; User aggregate. Responds to commands: - \#{@register_user_command} &quot;&quot;&quot; defp init_state, do: %__MODULE__{} @spec route(String.t(), any) :: {:routed, Map.y(), atom} | {:invalid, Map.t()} def route(@register_user_command, params) do cmd = %{ user: params[:user], password: params[:password] } @register_user_command |&gt; Seven.Otters.Command.create(cmd) |&gt; validate(@register_user_validation) end def route(_command, _params), do: :not_routed defp pre_handle_command(_command, _state), do: :ok @spec handle_command(Map.t(), any) :: {:managed, List.t()} defp handle_command(%Seven.Otters.Command{type: @register_user_command} = command, state) do event = %{ user: command.payload.user, password: command.payload.password } {:managed, [create_event(@user_registered_event, %{v1: event})]} end @spec handle_event(Map.t(), any) :: any defp handle_event(%Seven.Otters.Event{type: @user_registered_event} = event, state) do %{ state | user: event.payload.v1.user, password: event.payload.v1.password } end end","ref":"getting_started.html#create-your-first-aggregate-and-add-a-command","title":"Getting started - Create your first aggregate and add a command","type":"extras"},{"doc":"Create a new test file my_first_cqrses/test/user_test.exs. Substitute the content of this file with the following code: defmodule UserTest do use ExUnit.Case test &quot;register a new user&quot; do Seven.EventStore.EventStore.subscribe(&quot;UserRegistered&quot;, self()) request_id = Seven.Data.Persistence.new_id result = %Seven.CommandRequest{ id: request_id, command: &quot;RegisterUser&quot;, sender: __MODULE__, params: %{user: &quot;Paul User&quot;, password: &quot;my_difficult_password&quot;} } |&gt; Seven.CommandBus.send_command_request() refute result == :not_managed, &quot;Command is not managed by anyone&quot; assert_receive %Seven.Otters.Event{type: &quot;UserRegistered&quot;, request_id: ^request_id, correlation_module: MyFirstCqrses.Aggregate.User} end end Run the test: mix test","ref":"getting_started.html#test-the-command","title":"Getting started - Test the command","type":"extras"},{"doc":"Start your new application with: mix run --no-halt # or iex -S mix","ref":"getting_started.html#start-your-application","title":"Getting started - Start your application","type":"extras"},{"doc":"Good job! You have just create your first CQRS/ES application in Elixir.","ref":"getting_started.html#congratulation","title":"Getting started - Congratulation!","type":"extras"},{"doc":"Official website: https://www.sevenotters.org/ Docs: https://hexdocs.pm/seven Source: https://github.com/sevenotters","ref":"getting_started.html#learn-more","title":"Getting started - Learn more","type":"extras"},{"doc":"For now any communication with the Seven Otters project team is by pull requests or at seven.otters.project@gmail.com. If you like the project, any active help (in any form) is absolutly welcome.","ref":"getting_started.html#feedback-requests-help-anythings-else","title":"Getting started - Feedback, requests, help, anythings else","type":"extras"}]